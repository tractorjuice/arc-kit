description = "Generate requirements traceability matrix from requirements to design to tests"
prompt = """
You are helping an enterprise architect create a comprehensive traceability matrix that traces requirements through design to implementation and testing.

## User Input

```text
{{args}}
```

## Instructions

1. **Identify the project**: The user should specify a project name or number
   - Example: "Generate traceability matrix for payment gateway project"
   - Example: "Update traceability for project 001"

2. **Read all project artifacts**:
   - Read `projects/{project-dir}/requirements.md` - Source of truth for all requirements
   - Read `projects/{project-dir}/vendors/{vendor}/hld.md` - High-level design
   - Read `projects/{project-dir}/vendors/{vendor}/dld.md` - Detailed design
   - Read `projects/{project-dir}/vendors/{vendor}/hld-review.md` - Review findings
   - Read `projects/{project-dir}/vendors/{vendor}/dld-review.md` - Review findings
   - Read `.arckit/templates/traceability-matrix-template.md` - Template structure

3. **Build the traceability matrix**:

   ### Forward Traceability (Requirements → Design → Implementation → Tests)

   For each requirement (BR, FR, NFR, INT, DR):

   **Step 1: Requirement Details**
   - Requirement ID (e.g., FR-001)
   - Requirement statement
   - Priority (MUST/SHOULD/MAY)
   - Category (Business/Functional/Non-Functional/Integration/Data)

   **Step 2: Design Mapping**
   - Which HLD components implement this requirement?
   - Which DLD modules/classes handle this?
   - Architecture patterns used
   - Design decisions made

   **Step 3: Implementation Mapping**
   - Source code files/modules (if available)
   - APIs/endpoints that satisfy this
   - Database tables/schemas involved
   - Configuration requirements

   **Step 4: Test Coverage**
   - Unit test references
   - Integration test scenarios
   - Performance test cases (for NFRs)
   - Security test cases (for security requirements)
   - UAT test cases

   **Step 5: Status**
   - ✅ Fully implemented and tested
   - 🔄 In progress
   - ⏳ Planned
   - ❌ Not covered (GAP!)

   ### Backward Traceability (Tests → Implementation → Design → Requirements)

   For each test case:
   - Which requirements does it verify?
   - Which design components does it test?
   - What's the expected outcome?

   ### Gap Analysis

   Identify and flag:
   - **Orphan Requirements**: Requirements with NO design/implementation
   - **Orphan Design Elements**: Design components not linked to requirements (scope creep?)
   - **Orphan Tests**: Tests not linked to requirements (what are they testing?)
   - **Coverage Gaps**: Requirements without adequate test coverage

4. **Analyze coverage metrics**:

   Calculate and report:
   - **Requirements Coverage**: % of requirements with design mapping
   - **Implementation Coverage**: % of requirements implemented
   - **Test Coverage**: % of requirements with tests
   - **By Priority**:
     - MUST requirements: Should be 100% covered
     - SHOULD requirements: Should be >80% covered
     - MAY requirements: Can be <50% covered

   Example:
   ```
   Overall Coverage:
   - Business Requirements: 15/15 (100%)
   - Functional Requirements: 42/45 (93%) - 3 gaps
   - Non-Functional Requirements: 18/22 (82%) - 4 gaps
   - Integration Requirements: 8/8 (100%)

   Priority Coverage:
   - MUST requirements: 68/70 (97%) - 2 CRITICAL GAPS
   - SHOULD requirements: 12/15 (80%)
   - MAY requirements: 3/8 (38%)
   ```

5. **Risk Assessment**:

   Flag high-risk gaps:
   - **CRITICAL**: MUST requirements not covered
   - **HIGH**: Security/compliance requirements without tests
   - **MEDIUM**: Performance requirements without validation
   - **LOW**: Optional features not implemented

6. **Generate Traceability Report**:

   Create comprehensive report with:

   **Executive Summary**:
   - Overall traceability score (0-100)
   - Coverage by requirement type
   - Critical gaps requiring attention
   - Recommendation (Ready for Release / Gaps Must Be Addressed)

   **Detailed Traceability Matrix**:
   Large table with columns:
   | Req ID | Requirement | Priority | HLD Component | DLD Module | Implementation | Tests | Status |

   **Gap Analysis**:
   - List of orphan requirements (requirements not in design)
   - List of orphan design elements (design not in requirements - scope creep!)
   - List of untested requirements
   - Recommendations for each gap

   **Coverage Metrics**:
   - Visual representation (can use markdown tables/charts)
   - Breakdown by requirement type
   - Breakdown by priority
   - Trend over time (if multiple traceability runs)

   **Action Items**:
   - BLOCKING gaps (must fix before release)
   - Non-blocking gaps (fix in next sprint)
   - Technical debt to track

7. **Write outputs**:
   - `projects/{project-dir}/traceability-matrix.md` - Full traceability matrix
   - `projects/{project-dir}/coverage-report.md` - Coverage metrics and gaps
   - `projects/{project-dir}/gaps.md` - Detailed gap analysis with remediation plan
"""
